{"version":3,"sources":["redux/auth/auth-operations.js","redux/auth/auth-selectors.js","redux/auth/auth-slice.js","Components/Navigation.js","Components/UserMenu/default-avatar.png","Components/UserMenu/UserMenu.js","Components/AuthNav.js","Components/AppBar.js","Components/PrivateRoute.js","Components/PublicRoute.js","App.jsx","redux/store.js","index.js","redux/contacts/apiService.js","Components/Spinner/Spinner.js","redux/contacts/filterSlice.js"],"names":["axios","defaults","baseURL","token","headers","common","Authorization","register","createAsyncThunk","credentials","a","post","data","logIn","operations","logOut","fetchCurrentUser","_","thunkAPI","state","getState","persistedToken","auth","console","log","rejectWithValue","get","authSelectors","getIsLoggedIn","isLoggedIn","getUsername","user","name","getIsFetchingCurrent","isFetchingCurrentUser","authSlice","createSlice","initialState","email","extraReducers","authOperations","fulfilled","action","payload","pending","rejected","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","Navigation","useSelector","to","exact","style","activeStyle","container","alignItems","avatar","marginRight","UserMenu","dispatch","useDispatch","defaultAvatar","src","alt","width","Button","type","onClick","AuthNav","header","justifyContent","borderBottom","AppBar","Container","Row","Col","PrivateRoute","children","redirectTo","routeProps","PublicRoute","restricted","shouldRedirect","HomeView","lazy","RegisterView","LoginView","ContactsView","App","useEffect","Spinner","fallback","path","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","contactsApi","reducerPath","filterReducer","persistReducer","authReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","createApi","baseQuery","fetchBaseQuery","baseUrl","prepareHeaders","set","tagTypes","endpoints","builder","getContacts","query","providesTags","deleteContact","mutation","id","url","method","invalidatesTags","addContact","newContact","body","useGetContactsQuery","useDeleteContactMutation","useAddContactMutation","spin","keyframes","CgSpinner","defaultProps","size","filterSlice","filter","reducers","filterContact","actions"],"mappings":"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","file":"static/js/main.26b71a37.chunk.js","sourcesContent":["import axios from 'axios'\nimport { createAsyncThunk } from '@reduxjs/toolkit'\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com'\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = ''\n  },\n}\n\n/*\n * POST @ /users/signup\n * body: { name, email, password }\n * После успешной регистрации добавляем токен в HTTP-заголовок\n */\nconst register = createAsyncThunk('auth/register', async (credentials) => {\n  try {\n    const { data } = await axios.post('/users/signup', credentials)\n    token.set(data.token)\n    return data\n  } catch (error) {\n    // TODO: Добавить обработку ошибки error.message\n  }\n})\n\n/*\n * POST @ /users/login\n * body: { email, password }\n * После успешного логина добавляем токен в HTTP-заголовок\n */\nconst logIn = createAsyncThunk('auth/login', async (credentials) => {\n  try {\n    const { data } = await axios.post('/users/login', credentials)\n    token.set(data.token)\n    return data\n  } catch (error) {\n    // TODO: Добавить обработку ошибки error.message\n  }\n})\n\n/*\n * POST @ /users/logout\n * headers: Authorization: Bearer token\n * После успешного логаута, удаляем токен из HTTP-заголовка\n */\nconst logOut = createAsyncThunk('auth/logout', async () => {\n  try {\n    await axios.post('/users/logout')\n    token.unset()\n  } catch (error) {\n    // TODO: Добавить обработку ошибки error.message\n  }\n})\n/*\n * GET @ /users/current\n * headers:\n *    Authorization: Bearer token\n *\n * 1. Забираем токен из стейта через getState()\n * 2. Если токена нет, выходим не выполняя никаких операций\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\n */\nconst fetchCurrentUser = createAsyncThunk(\n  'auth/refresh',\n  async (_, thunkAPI) => {\n    const state = thunkAPI.getState()\n    const persistedToken = state.auth.token\n\n    if (persistedToken === null) {\n      console.log('Токена нет, уходим из fetchCurrentUser')\n      return thunkAPI.rejectWithValue()\n    }\n\n    token.set(persistedToken)\n    try {\n      const { data } = await axios.get('/users/current')\n      return data\n    } catch (error) {\n      // TODO: Добавить обработку ошибки error.message\n    }\n  },\n)\n\nconst operations = {\n  register,\n  logOut,\n  logIn,\n  fetchCurrentUser,\n}\nexport default operations\n","const getIsLoggedIn = state => state.auth.isLoggedIn;\n\nconst getUsername = state => state.auth.user.name;\n\nconst getIsFetchingCurrent = state => state.auth.isFetchingCurrentUser;\n\nconst authSelectors = {\n  getIsLoggedIn,\n  getUsername,\n  getIsFetchingCurrent,\n};\nexport default authSelectors;\n","import { createSlice } from '@reduxjs/toolkit';\nimport authOperations from './auth-operations';\n\nconst initialState = {\n  user: { name: null, email: null },\n  token: null,\n  isLoggedIn: false,\n  isFetchingCurrentUser: false,\n};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  extraReducers: {\n    [authOperations.register.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n    },\n    [authOperations.logIn.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n    },\n    [authOperations.logOut.fulfilled](state) {\n      state.user = { name: null, email: null };\n      state.token = null;\n      state.isLoggedIn = false;\n    },\n    [authOperations.fetchCurrentUser.pending](state) {\n      state.isFetchingCurrentUser = true;\n    },\n    [authOperations.fetchCurrentUser.fulfilled](state, action) {\n      state.user = action.payload;\n      state.isLoggedIn = true;\n      state.isFetchingCurrentUser = false;\n    },\n    [authOperations.fetchCurrentUser.rejected](state) {\n      state.isFetchingCurrentUser = false;\n    },\n  },\n});\n\nexport default authSlice.reducer;\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\nimport { authSelectors } from '../redux/auth'\n\nconst styles = {\n  link: {\n    display: 'inline-block',\n    textDecoration: 'none',\n    padding: 12,\n    fontWeight: 700,\n    color: '#2A363B',\n  },\n  activeLink: {\n    color: '#E84A5F',\n  },\n}\n\nconst Navigation = () => {\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn)\n  return (\n    <nav>\n      <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\n        Главная\n      </NavLink>\n\n      {isLoggedIn && (\n        <>\n          <NavLink\n            to=\"/contacts\"\n            exact\n            style={styles.link}\n            activeStyle={styles.activeLink}\n          >\n            Контакты\n          </NavLink>\n        </>\n      )}\n    </nav>\n  )\n}\n\nexport default Navigation\n","export default __webpack_public_path__ + \"static/media/default-avatar.e44fc4e2.png\";","import { useDispatch, useSelector } from 'react-redux'\nimport { authSelectors, authOperations } from '../../redux/auth'\nimport defaultAvatar from './default-avatar.png'\nimport Button from 'react-bootstrap/Button'\n\nconst styles = {\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  avatar: {\n    marginRight: 4,\n  },\n  name: {\n    fontWeight: 700,\n    marginRight: 12,\n  },\n}\n\nexport default function UserMenu() {\n  const dispatch = useDispatch()\n  const name = useSelector(authSelectors.getUsername)\n  const avatar = defaultAvatar\n\n  return (\n    <div style={styles.container}>\n      <img src={avatar} alt=\"\" width=\"32\" style={styles.avatar} />\n      <span style={styles.name}>Вы вошли как {name}</span>\n      {/* <button type=\"button\" onClick={() => dispatch(authOperations.logOut())}>\n        Выйти\n      </button> */}\n      <Button type=\"button\" onClick={() => dispatch(authOperations.logOut())}>\n        Выйти\n      </Button>\n    </div>\n  )\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst styles = {\n  link: {\n    display: 'inline-block',\n    textDecoration: 'none',\n    padding: 12,\n    fontWeight: 700,\n    color: '#2A363B',\n  },\n  activeLink: {\n    color: '#E84A5F',\n  },\n}\n\nexport default function AuthNav() {\n  return (\n    <div>\n      <NavLink\n        to=\"/register\"\n        exact\n        style={styles.link}\n        activeStyle={styles.activeLink}\n      >\n        Регистрация\n      </NavLink>\n      <NavLink\n        to=\"/login\"\n        exact\n        style={styles.link}\n        activeStyle={styles.activeLink}\n      >\n        Войти в аккаунт\n      </NavLink>\n    </div>\n  )\n}\n","import { useSelector } from 'react-redux'\nimport Navigation from './Navigation'\nimport UserMenu from './UserMenu'\nimport AuthNav from './AuthNav'\nimport { authSelectors } from '../redux/auth'\nimport { Container, Row, Col } from 'react-bootstrap'\n\nconst styles = {\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottom: '1px solid #2A363B',\n  },\n}\n\nexport default function AppBar() {\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn)\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <header style={styles.header}>\n            <Navigation />\n            {isLoggedIn ? <UserMenu /> : <AuthNav />}\n          </header>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n","import { useSelector } from 'react-redux'\nimport { Route, Redirect } from 'react-router-dom'\nimport { authSelectors } from '../redux/auth'\n\nexport default function PrivateRoute({\n  children,\n  redirectTo = '/',\n  ...routeProps\n}) {\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn)\n  return (\n    <Route {...routeProps}>\n      {isLoggedIn ? children : <Redirect to={redirectTo} />}\n    </Route>\n  )\n}\n","import { useSelector } from 'react-redux'\nimport { Route, Redirect } from 'react-router-dom'\nimport { authSelectors } from '../redux/auth'\n\nexport default function PublicRoute({\n  children,\n  restricted = false,\n  redirectTo = '/',\n  ...routeProps\n}) {\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn)\n  const shouldRedirect = isLoggedIn && restricted\n  return (\n    <Route {...routeProps}>\n      {shouldRedirect ? <Redirect to={redirectTo} /> : children}\n    </Route>\n  )\n}\n","import { useEffect, Suspense, lazy } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Switch } from 'react-router-dom'\nimport AppBar from './Components/AppBar'\nimport PrivateRoute from './Components/PrivateRoute'\nimport PublicRoute from './Components/PublicRoute'\nimport { authOperations, authSelectors } from './redux/auth'\nimport { Spinner } from './Components/Spinner/Spinner'\n\nconst HomeView = lazy(() => import('./views/HomeView'))\nconst RegisterView = lazy(() => import('./views/RegisterView'))\nconst LoginView = lazy(() => import('./views/LoginView'))\nconst ContactsView = lazy(() => import('./views/ContactsView'))\n\nexport default function App() {\n  const dispatch = useDispatch()\n  const isFetchingCurrentUser = useSelector(authSelectors.getIsFetchingCurrent)\n  useEffect(() => {\n    dispatch(authOperations.fetchCurrentUser())\n  }, [dispatch])\n\n  return isFetchingCurrentUser ? (\n    <Spinner />\n  ) : (\n    <>\n      <AppBar />\n      <Switch>\n        <Suspense fallback={<p>Загружаем...</p>}>\n          <PublicRoute exact path=\"/\">\n            <HomeView />\n          </PublicRoute>\n          <PublicRoute exact path=\"/register\" restricted>\n            <RegisterView />\n          </PublicRoute>\n          <PublicRoute exact path=\"/login\" redirectTo=\"/contacts\" restricted>\n            <LoginView />\n          </PublicRoute>\n          <PrivateRoute path=\"/contacts\" redirectTo=\"/login\">\n            <ContactsView />\n          </PrivateRoute>\n        </Suspense>\n      </Switch>\n    </>\n  )\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { filterReducer } from './contacts/filterSlice'\nimport { contactsApi } from './contacts/apiService'\nimport { authReducer } from './auth'\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n}\n\nexport const store = configureStore({\n  reducer: {\n    [contactsApi.reducerPath]: contactsApi.reducer,\n    filter: filterReducer,\n    auth: persistReducer(authPersistConfig, authReducer),\n  },\n\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(contactsApi.middleware),\n\n  devTools: process.env.NODE_ENV === 'development',\n})\n\nexport const persistor = persistStore(store)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport 'modern-normalize/modern-normalize.css'\nimport { store, persistor } from './redux/store'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const contactsApi = createApi({\n  reducerPath: 'contactsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://connections-api.herokuapp.com',\n    prepareHeaders: (headers, { getState }) => {\n      const token = getState().auth.token\n\n      // If we have a token set in state, let's assume that we should be passing it.\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`)\n      }\n\n      return headers\n    },\n  }),\n  tagTypes: ['Contact'],\n\n  endpoints: (builder) => ({\n    getContacts: builder.query({\n      query: () => '/contacts',\n      providesTags: ['Contact'],\n    }),\n\n    deleteContact: builder.mutation({\n      query: (id) => ({\n        url: `/contacts/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Contact'],\n    }),\n\n    addContact: builder.mutation({\n      query: (newContact) => ({\n        url: '/contacts',\n        method: 'POST',\n        body: newContact,\n      }),\n      invalidatesTags: ['Contact'],\n    }),\n  }),\n})\n\nexport const {\n  useGetContactsQuery,\n  useDeleteContactMutation,\n  useAddContactMutation,\n} = contactsApi\n","import styled from '@emotion/styled/macro'\nimport { keyframes } from '@emotion/react'\nimport { CgSpinner } from 'react-icons/cg'\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n\n100% {\n  transform: rotate(1turn);\n}\n`\n\nexport const Spinner = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`\n\nSpinner.defaultProps = {\n  size: 40,\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  filter: '',\n}\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    filterContact(state, action) {\n      state.filter = action.payload\n    },\n  },\n})\n\nexport const { filterContact } = filterSlice.actions\n\nexport const filterReducer = filterSlice.reducer\n"],"sourceRoot":""}